{"version":3,"sources":["logo.svg","components/Header.js","components/bubble.js","components/selection.js","components/merge.js","utils/functions.js","components/animateMerge.js","components/Legend.js","pages/Application.js","App.js","reportWebVitals.js","index.js"],"names":["Header","SPEED","array","arrayBars","props","useState","sliderVal","setSlider","style","fontFamily","fontSize","color","algoStyle","Navbar","className","collapseOnSelect","expand","variant","Toggle","aria-controls","Collapse","id","Nav","width","Row","Col","xl","Link","active","onClick","reset","Item","type","min","max","value","onChange","event","console","log","target","handleSlide","mergeSort","bubbleSort","selectionSort","changeColor","tag","idx","backgroundColor","changeWidth","num","Math","floor","delay","ms","Promise","res","setTimeout","pink","runBubble","a","iterations","length","temp","startBubble","inputArray","speed","cb","document","getElementsByClassName","runSelection","currentIdx","smallest","smallestIdx","startSelection","animations","indices","getAnimations","arr","sortingCopy","getIndices","merge","valuesToSort","idxToSort","myArr","middle","left","splice","sort","right","push","shift","startIdx","indexOf","Array","from","x","i","indexList","runAnimation","j","index","val","startAnimation","values","Legend","desc","bestCase","worstCase","colors","Application","setArray","legend","setLegend","isActive","setActive","useEffect","generateArr","tempArr","randomInt","includes","random","initialArray","map","element","setInitialWidth","obj","bestcase","worstcase","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cb4087af.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState} from \"react\";\r\nimport {Nav, Navbar, Row, Col} from 'react-bootstrap';\r\nimport \"../styles/header.css\";\r\n\r\nfunction Header(props) {\r\n\r\n  const [sliderVal, setSlider] = useState(25);\r\n\r\n  const handleSlide= (event) => {\r\n    console.log(event.target.value);\r\n    setSlider(event.target.value);\r\n  }\r\n\r\n    const style= {\r\n        fontFamily: \"Courier New\",\r\n        fontSize: \"1.25rem\",\r\n        color: \"#B0E0E6\",\r\n      }\r\n    const algoStyle= {\r\n      fontFamily: \"Courier New\",\r\n      fontSize: \"1rem\",\r\n      color: \"#B0E0E6\",\r\n    }\r\n\r\n    return (\r\n        <Navbar className=\"py-4 toolbar\" collapseOnSelect expand=\"lg\" variant=\"dark\">\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav id=\"btn-nav\" style={{width: \"100%\"}}>\r\n              <Row id=\"btn-row\">\r\n                  <Col xl={4}>\r\n            <Nav.Link className={!props.active ? \"enabled\" : \"disabled\"} onClick={!props.active ? () => props.reset() : null} style={style}>Generate New Array</Nav.Link>\r\n                  </Col>\r\n                  <Col xl={4}>\r\n            <Nav.Item style={style}>Sorting Speed <br/> (lower = faster)</Nav.Item>\r\n            <input \r\n            id=\"slider\" \r\n            style={{width: \"10rem\"}}\r\n            type=\"range\" \r\n            min=\"10\" max=\"50\"\r\n            value={sliderVal}\r\n            onChange={(event) => handleSlide(event)}\r\n            />\r\n                  </Col>\r\n                  <Col xl={4} id=\"algoTypes-col\">\r\n            <Nav.Link className={!props.active ? \"enabled\" : \"disabled\"} onClick={() => props.mergeSort(sliderVal)} style={algoStyle}>Merge Sort</Nav.Link>\r\n            <Nav.Link className={!props.active ? \"enabled\" : \"disabled\"} onClick= {() => props.bubbleSort(sliderVal)} style={algoStyle}>Bubble Sort</Nav.Link>\r\n            <Nav.Link className={!props.active ? \"enabled\" : \"disabled\"} onClick= {() => props.selectionSort(sliderVal)} style={algoStyle}>Selection Sort</Nav.Link>\r\n                  </Col>\r\n              </Row>\r\n          </Nav>\r\n          \r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n      )\r\n}\r\n\r\nexport default Header;","import { changeColor, changeWidth, delay } from \"../utils/functions\";\r\n\r\nlet SPEED;\r\nlet array;\r\nlet arrayBars;\r\nconst pink= \"rgb(247, 144, 161)\";\r\n\r\nconst runBubble= async () => {\r\n    for (let iterations = 0; iterations < array.length; iterations++) {\r\n        for (let idx = 0; idx < (array.length - iterations - 1); idx++) {\r\n            \r\n            changeColor(arrayBars, idx, \"darkviolet\");\r\n            changeColor(arrayBars, idx+1, \"darkviolet\");\r\n            await delay(SPEED);\r\n\r\n            if (array[idx] > array[idx+1]) {\r\n                changeColor(arrayBars, idx, \"red\");\r\n                changeColor(arrayBars, idx+1, \"red\");\r\n\r\n                await delay(SPEED);\r\n\r\n                let temp= array[idx];\r\n                array[idx]= array[idx+1];\r\n                changeWidth(arrayBars, idx, array[idx+1]);\r\n\r\n                array[idx+1]= temp;\r\n                changeWidth(arrayBars, idx+1, temp);\r\n\r\n                await delay(SPEED);             \r\n            }\r\n            changeColor(arrayBars, idx, pink);\r\n            changeColor(arrayBars, idx+1, pink);\r\n        }\r\n    }\r\n}\r\n\r\nexport const startBubble= async(inputArray, speed, cb) => {\r\n   array= inputArray;\r\n   SPEED= speed;\r\n   arrayBars= document.getElementsByClassName(\"array\");\r\n\r\n    await runBubble();\r\n    cb();\r\n}\r\n\r\n","import { changeColor, changeWidth, delay } from \"../utils/functions\";\n\nlet SPEED;\nlet arrayBars;\nlet array;\nconst pink= \"rgb(247, 144, 161)\";\n\nconst runSelection= async () => {\n\n    for (let currentIdx = 0; currentIdx < array.length - 1; currentIdx++) {\n        let smallest= null;\n        let smallestIdx= null;\n\n        for (let idx = currentIdx; idx < array.length; idx++) {\n            changeColor(arrayBars, idx, \"darkviolet\");\n            await delay(SPEED);\n\n            if (smallest == null || smallest > array[idx]) {\n\n                if (smallest !== null) changeColor(arrayBars, smallestIdx, pink);\n                changeColor(arrayBars, idx, \"limegreen\");\n                await delay(SPEED);\n\n                smallest= array[idx];\n                smallestIdx= idx;\n            } else {\n                changeColor(arrayBars, idx, pink);\n            }\n        }\n\n        if (smallestIdx !== currentIdx) {\n            changeColor(arrayBars, smallestIdx, \"red\");\n            changeColor(arrayBars, currentIdx, \"red\");\n            await delay(SPEED);\n    \n            array[smallestIdx]= array[currentIdx];\n            changeWidth(arrayBars, smallestIdx, array[currentIdx]);\n    \n    \n            array[currentIdx] = smallest;\n            changeWidth(arrayBars, currentIdx, smallest);\n    \n            await delay(SPEED);\n\n        }\n\n\n        changeColor(arrayBars, smallestIdx, pink);\n        changeColor(arrayBars, currentIdx, pink);\n\n        await delay(SPEED);\n    }\n}\n\nexport const startSelection= async(inputArray, speed, cb) => {\n    array= inputArray;\n    SPEED= speed;\n    arrayBars= document.getElementsByClassName('array');\n    await runSelection();\n    cb();\n}\n\n\n\n","let animations= [];\r\nlet indices= [];\r\nlet array\r\nexport function getAnimations(arr) {\r\n    animations= [];\r\n    indices=[];\r\n    array = [...arr];\r\n    let sortingCopy= [...arr];\r\n    let indexingCopy= [...arr];\r\n    getIndices(indexingCopy);\r\n    merge(sortingCopy);\r\n    return [animations, indices];\r\n}\r\n\r\nconst merge= (myArr) => {\r\n\r\n\r\nif (myArr.length < 2) return myArr;\r\n\r\nconst middle= Math.floor(myArr.length / 2);\r\nconst left= myArr.splice(0, middle);\r\n\r\nreturn sort(merge(left), merge(myArr));\r\n}\r\n\r\nconst sort= (left, right) => {\r\nlet arr= [];\r\n\r\nwhile (left.length && right.length) {\r\n    if (left[0] < right[0]) {\r\n        arr.push(left.shift());\r\n    } else {\r\n        arr.push(right.shift());\r\n    }\r\n}\r\nanimations.push([...arr, ...left, ...right]);\r\nreturn [...arr, ...left, ...right];\r\n}\r\n\r\nfunction getIndices(myArr) {\r\n\r\n    if (myArr.length < 2) return myArr;\r\n    \r\n    const middle= Math.floor(myArr.length / 2);\r\n    const left= myArr.splice(0, middle);\r\n\r\n    return indexList(getIndices(left), getIndices(myArr));\r\n\r\n}\r\n\r\nfunction indexList(left, right) {\r\n    let startIdx= array.indexOf(left[0]);\r\n    let endIdx= array.indexOf(right[right.length - 1]);\r\n    let length= (endIdx - startIdx) + 1;\r\n    let temp = Array.from({length}, (x, i) => i + startIdx);\r\n\r\n    indices.push([...temp]);\r\n\r\n    return [...left, ...right];\r\n}\r\n","export const changeColor= (tag, idx, color) => {\r\n    tag[idx].style.backgroundColor= color;\r\n}\r\n\r\nexport const changeWidth= (tag, idx, width) => {\r\n    let num= ((Math.floor(width / 15)) + 20);\r\n    tag[idx].style.width= `${num}vmin`;\r\n}\r\n\r\nexport const setInitialWidth= (num) => {\r\n    return (Math.floor(num / 15) + 20);\r\n}\r\n\r\nexport const delay= ms => new Promise(res => setTimeout(res, ms));","import { changeColor, changeWidth, delay } from \"../utils/functions\";\r\n\r\nlet arrayBars;\r\nlet valuesToSort; // this array contains the values in the order merge sort sorts them. Outer array = step #, inner array = values\r\nlet idxToSort; //this array contains the indices the merge sort changes in order. Outer array = step #, inner array = index\r\n//these two arrays order along with inner arrays correlate, the first value in valuesToSort is at the first index of idxToSort\r\n\r\nlet SPEED;\r\n\r\nconst runAnimation= async() => {\r\n\r\n    for (let i = 0; i < valuesToSort.length; i++) {\r\n            \r\n        for (let j = 0; j < valuesToSort[i].length; j++) {\r\n            let index= idxToSort[i][j];\r\n            changeColor(arrayBars, index, \"darkviolet\");\r\n        }\r\n        await delay(SPEED);\r\n        for (let j = 0; j < valuesToSort[i].length; j++) {\r\n            let index= idxToSort[i][j];\r\n            changeColor(arrayBars, index, \"red\");\r\n        }\r\n        await delay(SPEED);\r\n        for (let j = 0; j < valuesToSort[i].length; j++) {\r\n            let index= idxToSort[i][j];\r\n            let val= valuesToSort[i][j];\r\n            changeWidth(arrayBars, index, val);\r\n            await delay(SPEED);\r\n        }\r\n        for (let j = 0; j < valuesToSort[i].length; j++) {\r\n            let index= idxToSort[i][j];\r\n            changeColor(arrayBars, index, \"rgb(247, 144, 161)\");\r\n        }\r\n        await delay(SPEED);\r\n    }\r\n}\r\n\r\nexport const startAnimation= async (values, indices, speed, cb) => {\r\narrayBars= document.getElementsByClassName('array');\r\nvaluesToSort= values;\r\nidxToSort= indices;\r\nSPEED= speed;\r\nconsole.log(SPEED);\r\n\r\nawait runAnimation();\r\ncb()\r\n}","import React from 'react';\r\nimport \"../styles/legend.css\";\r\n\r\nfunction Legend(props) {\r\n\r\n    return (\r\n        <>\r\n        <h1>Legend</h1>\r\n        <h5 className=\"text\"><strong>Descripton: </strong>{props.desc}</h5>\r\n        <h5 className=\"text\"><strong>Best Case: </strong>{props.bestCase}</h5>\r\n        <h5 className=\"text\"><strong>Worst Case: </strong>{props.worstCase}</h5>\r\n        <h5 className=\"text\"><h3>Colors: </h3>{props.colors}</h5>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Legend;","import React, { useState, useEffect } from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport \"../styles/array.css\";\r\nimport { startBubble } from \"../components/bubble\";\r\nimport { setInitialWidth } from \"../utils/functions\";\r\nimport { startSelection } from \"../components/selection\";\r\nimport { getAnimations } from \"../components/merge\";\r\nimport { startAnimation } from \"../components/animateMerge\";\r\nimport Legend from \"../components/Legend\";\r\n\r\nfunction Application() {\r\n\r\n    const [array, setArray] = useState([]);\r\n    const [legend, setLegend]= useState(null);\r\n    const [isActive, setActive] = useState(false);\r\n\r\n    useEffect(() => {\r\n        generateArr();\r\n    }, []);\r\n\r\n    const generateArr= () => {\r\n        let tempArr= [];\r\n\r\n        for (let i = 0; i < 50; i++) {\r\n            let num;\r\n            do {\r\n                num= randomInt(25, 1000);\r\n            } while (tempArr.includes(num));\r\n            tempArr.push(num);\r\n        }\r\n        setArray(tempArr);\r\n    }\r\n    const randomInt= (min, max) => {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\n    const bubbleSort= (speed) => {\r\n        speed= (speed * 3) / 4;\r\n        if (isActive) {\r\n            return;\r\n        } else {\r\n            setActive(true);\r\n        }\r\n        let obj= {\r\n            desc: \"Bubble sort swaps an element until it reaches a larger element, and then continues that process for the rest of the iteration. Each iteration will result in the largest number reaching its correct position.\",\r\n            bestcase: \"O(n)\",\r\n            worstcase: \"O(n^2)\",\r\n            color: (\r\n                <>\r\n                <h5 style={{color: \"darkviolet\"}}>Purple: <span>Means algorithm is currently viewing element(s)</span></h5>\r\n                <h5 style={{color: \"red\"}}>Red: <span>Means algorithm is swapping element(s)</span></h5>\r\n                </>\r\n            )\r\n        }\r\n        setLegend(obj);\r\n\r\n        startBubble(array, speed, () => {\r\n            setActive(false);\r\n        });\r\n    }\r\n\r\n    const selectionSort= (speed) => {\r\n        if (isActive) {\r\n            return;\r\n        } else {\r\n            setActive(true);\r\n        }\r\n\r\n        let obj= {\r\n            desc: \"Selection sort keeps track of the smallest element on every iteration, and swaps that element into its position. Each iteration will result in the smallest number reaching its correct position.\",\r\n            bestcase: \"O(n^2)\",\r\n            worstcase: \"O(n^2)\",\r\n            color: (\r\n                <>\r\n                <h5 style={{color: \"limegreen\"}}>Green: <span>Shows the current smallest element of iteration</span></h5>\r\n                <h5 style={{color: \"darkviolet\"}}>Purple: <span>Means algorithm is currently viewing element(s)</span></h5>\r\n                <h5 style={{color: \"red\"}}>Red: <span>Means algorithm is swapping element(s)</span></h5>\r\n                </>\r\n            )\r\n        }\r\n        setLegend(obj);\r\n        startSelection(array, speed, () => {\r\n            setActive(false);\r\n        });\r\n    }\r\n\r\n    const mergeSort= (speed) => {\r\n        if (isActive) {\r\n            return;\r\n        } else {\r\n            setActive(true);\r\n        }\r\n        console.log(legend);\r\n        if (speed < 15 ) speed = 15;\r\n        if (speed > 49) speed = 60;\r\n        let obj= {\r\n            desc: \"Merge sort divides the array into halves until it reaches one, then it sorts the pieces, and combines the array back together\",\r\n            bestcase: \"O(nLogn)\",\r\n            worstcase: \"O(nLogn)\",\r\n            color: (\r\n                <>\r\n                <h5 style={{color: \"darkviolet\"}}>Purple: <span>Means algorithm is currently viewing element(s)</span></h5>\r\n                <h5 style={{color: \"red\"}}>Red: <span>Means algorithm is swapping element(s)</span></h5>\r\n                </>\r\n            )\r\n        }\r\n        setLegend(obj);\r\n\r\n        let res= getAnimations(array);\r\n        startAnimation(res[0], res[1], speed, () => {\r\n            setActive(false);\r\n        });  \r\n    }\r\n\r\n    let initialArray = array.map((element, index) => {\r\n        let num= setInitialWidth(element);\r\n        return (\r\n            <div className=\"array\" key={index} style={{width: `${num}vmin`}}></div>\r\n        )\r\n    })\r\n\r\n\r\n    return (\r\n        <>\r\n        <Header \r\n        reset= {generateArr} \r\n        array={array} \r\n        bubbleSort= {bubbleSort}\r\n        selectionSort= {selectionSort}\r\n        mergeSort= {mergeSort}\r\n        active= {isActive}\r\n        />\r\n    <div id=\"grid\">\r\n        <div id=\"container\" style={{width: \"50%\"}}>\r\n            {initialArray}\r\n        </div>\r\n        <div id=\"legendbox\">\r\n            <div id=\"legend\">\r\n                <Legend \r\n                desc={(legend !== null ? legend.desc : null)}\r\n                bestCase={(legend !== null ? legend.bestcase : null)}\r\n                worstCase={(legend !== null ? legend.worstcase : null)}\r\n                colors={(legend !== null ? legend.color : null)}\r\n                />\r\n            </div>\r\n        </div>\r\n    </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Application;","import logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Application from \"./pages/Application\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Application />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}